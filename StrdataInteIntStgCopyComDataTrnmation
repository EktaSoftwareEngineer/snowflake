// Database : EMPLOYEE_DATA
//Schema : RAW_DATA
//Schema : TRANSFORMED_DATA
CREATE OR REPLACE DATABASE EMPLOYEE_DATA;
CREATE OR REPLACE schema RAW_DATA;
CREATE OR REPLACE schema TRANSFORMED_DATA;
CREATE OR REPLACE table EMPLOYEE_RAW(
EMPLOYEE_ID STRING,
FIRST_NAME STRING,
LAST_NAME STRING,
DEPARTMENT STRING,
SALARY DECIMAL(10,2),
HIRE_DATE DATE,
LOCATION STRING);

LIST @%EMPLOYEE_RAW;

//Create Transformed Table in the TRANSFORMED_DATA schema

USE SCHEMA TRANSFORMED_DATA;

CREATE OR REPLACE table EMPLOYEE_TRANSFORMED(
EMPLOYEE_ID STRING,
FULL_NAME STRING,
DEPARTMENT STRING,
ANNUAL_SALARY DECIMAL(10, 2),
HIRE_DATE DATE,
EXPERIENCE_LEVEL STRING,
TENURE_DAYS STRING,
STATE STRING,
COUNTRY STRING,
BONUS_ELIGIBILITY STRING,
HIGH_POTENTIAL_FLAG STRING);

//Upload the CSV File to an Internal Stage
USE SCHEMA RAW_DATA;
CREATE OR REPLACE STAGE RAW_DATA_stage;
LIST @%EMPLOYEE_RAW;
List @~ ;
SELECT * FROM EMPLOYEE_RAW;
SELECT LOCATION FROM EMPLOYEE_RAW;

copy into EMPLOYEE_RAW 
FROM @RAW_DATA_stage
file_format =(TYPE ='CSV'SKIP_header=1);
Full Name: Concatenate first_name and last_name.
-- Annual Salary: Multiply the monthly salary by 12.
-- Experience Level: Classify employees based on the hire date. For example:
-- New Hire: Less than 1 year.
-- Mid-level: 1 to 5 years.
-- Senior: More than 5 years.
-- Employee Tenure: Calculate how long an employee has been with the company based on the hire_date in days
-- State: Fetch the value before the hyphen(-) in the location column
-- Country: Fetch the value after the hyphen(-) in the location column
-- Employee's Eligibility for Bonus: For example, employees with a salary greater than $ 10,000 are eligible for a bonus.
-- Flagging High-Potential Employees: Flag employees who have been with the company for more than 3 years. 

-- //Perform Data Transformations and insert data into the Transformed Table 
INSERT INTO  EMPLOYEE_DATA.TRANSFORMED_DATA.EMPLOYEE_TRANSFORMED (
  EMPLOYEE_ID,
  FULL_NAME,
  DEPARTMENT,
  ANNUAL_SALARY,
  HIRE_DATE,
  EXPERIENCE_LEVEL,
  TENURE_DAYS,
  STATE,
  COUNTRY,
  BONUS_ELIGIBILITY,
  HIGH_POTENTIAL_FLAG
)
SELECT
  EMPLOYEE_ID,
  CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME,
  DEPARTMENT,
  SALARY * 12 AS ANNUAL_SALARY,
  HIRE_DATE,
  CASE
    WHEN DATEDIFF(DAY,EMPLOYEE_RAW.HIRE_DATE,CURRENT_DATE)< 365 THEN 'New Hire'
    //WHEN DATEDIFF(CURRENT_DATE, HIRE_DATE) < 365 THEN 'New Hire'
    //WHEN DATEDIFF(CURRENT_DATE, HIRE_DATE) BETWEEN 365 AND 1825 THEN 'Mid-level'
    WHEN DATEDIFF(DAY,EMPLOYEE_RAW.HIRE_DATE,CURRENT_DATE) BETWEEN 365 AND 1825 THEN 'Mid-level'
    ELSE 'Senior'
  END AS EXPERIENCE_LEVEL,
    CAST(DATEDIFF(DAY,EMPLOYEE_RAW.HIRE_DATE,CURRENT_DATE) AS STRING) AS TENURE_DAYS,
  //CAST(DATEDIFF(CURRENT_DATE, HIRE_DATE) AS STRING) AS TENURE_DAYS,
  SPLIT_PART(LOCATION, '-', 1) AS STATE,
  SPLIT_PART(LOCATION, '-', 2) AS COUNTRY,
  CASE
    WHEN SALARY > 10000 THEN 'Eligible'
    ELSE 'Not Eligible'
  END AS BONUS_ELIGIBILITY,
  CASE
    //WHEN Datadiff(EMPLOYEE_RAW.HIRE_DATE, CURRENT_DATE)> 1095 THEN 'High Potential'
    WHEN DATEDIFF(DAY,EMPLOYEE_RAW.HIRE_DATE,CURRENT_DATE)> 1095 THEN 'High Potential'
    //WHEN DATEDIFF(CURRENT_DATE, HIRE_DATE) > 1095 THEN 'High Potential'
    ELSE 'Regular'
  END AS HIGH_POTENTIAL_FLAG
FROM EMPLOYEE_DATA.RAW_DATA.EMPLOYEE_RAW;
SELECT *
FROM EMPLOYEE_DATA.TRANSFORMED_DATA.EMPLOYEE_TRANSFORMED;

//Employee Count by Department

SELECT DEPARTMENT, COUNT(*) As Employee_Count
FROM EMPLOYEE_RAW
GROUP BY DEPARTMENT;

//Provide count of employees by country
SELECT COUNT(*) As Employee_Count
FROM EMPLOYEE_DATA.TRANSFORMED_DATA.EMPLOYEE_TRANSFORMED
GROUP BY COUNTRY;

-- Extract employees who were hired within 12 months
SELECT EMPLOYEE_ID 
FROM EMPLOYEE_DATA.TRANSFORMED_DATA.EMPLOYEE_TRANSFORMED
WHERE EXPERIENCE_LEVEL like 'New Hire';

-- Extract the top 10% of employees by salary
WITH RankedSalaries AS (
  SELECT
    EMPLOYEE_ID,
    ANNUAL_SALARY,
    PERCENT_RANK() OVER (ORDER BY ANNUAL_SALARY DESC) AS pr
  FROM
    EMPLOYEE_DATA.TRANSFORMED_DATA.EMPLOYEE_TRANSFORMED
)
SELECT
  EMPLOYEE_ID,
    ANNUAL_SALARY,
FROM
  RankedSalaries
WHERE
  pr <= 0.1;

-- Calculate the total salary expense per department for each year.
SELECT DEPARTMENT, SUM(SALARY)
FROM EMPLOYEE_RAW
GROUP BY DEPARTMENT;
-- Determine how many employees with 5+ years with company
SELECT COUNT(*) As Employee_Count
FROM EMPLOYEE_DATA.TRANSFORMED_DATA.EMPLOYEE_TRANSFORMED
WHERE EXPERIENCE_LEVEL like 'Senior';

USE SCHEMA FLATTEN_DATA;
CREATE OR REPLACE TABLE FLATTEN_DATA;



